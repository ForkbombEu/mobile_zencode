{
    "data": {},
    "iss_path": "iss",
    "did_url_path": "did_url",
    "message_path": "message",
    "zen_1": "Scenario 'w3c': jwt\n\nGiven I have a 'json web token' named 'message'\nGiven I have a 'string array' in path 'result.items.1.schema.required'\n\n# check expiration\nWhen I pickup from path 'message.payload.exp'\nWhen I create the timestamp\n\nIf I verify number 'exp' is less than 'timestamp'\nWhen I exit with error message 'Expired jws, proof not verified'\nEndif\n\n# check required_claims\nWhen I pickup from path 'message.payload.result'\nWhen I rename 'result' to 'input_to_custom_code'\nWhen I create flat array of keys in 'input_to_custom_code'\nForeach 'claim' in 'flat array'\nWhen done\nIf I verify 'claim' is found in 'required'\nWhen I remove 'claim' from 'required'\nEndIf\nEndforeach\n\nWhen I set 'zero' to '0' as 'float'\nIf I verify size of 'required' is more than 'zero'\nWhen I exit with error message 'Missing some required claims'\nEndIf\n\nWhen I pickup from path 'message.payload.iss'\nIf I verify 'iss' has suffix '/'\nWhen I split the rightmost '1' bytes of 'iss'\nEndIf\nWhen I append the string '/.well-known/openid-relying-party' to 'iss'\n\nWhen I pickup from path 'message.header.alg'\n\nThen print the 'iss' as 'string'\nThen print the 'alg' as 'string'\nThen print the 'input_to_custom_code' as 'string'\n",
    "zen_2": "Given I have a 'string array' in path 'result.jwks.keys'\nGiven I have a 'string' named 'alg'\n\nForeach 'jwk' in 'keys'\nIf I verify 'alg' is equal to 'alg' in 'jwk'\nWhen I copy 'kid' from 'jwk' to 'kid'\nand break the foreach\nEndIf\nEndForeach\n\nIf I verify 'kid' is not found\nWhen I exit with error message 'Relying party key matching the jws header alg not found'\nEndIf\n\nWhen I set 'did_url' to 'https://did.dyne.org/dids/' as 'string'\nand I append the 'kid' to 'did_url'\n\nThen print the 'did_url'\n",
    "zen_3": "Scenario 'jwt': jwt\nScenario 'w3c': did\n\nGiven I have a 'string dictionary' in path 'result.didDocument'\nand I have a 'string' named 'message'\nand I rename the 'message' to 'message_string'\nand I have a 'json web token' named 'message'\n\nWhen I pickup from path 'message.header.alg'\nand I set 'ES256' to 'ES256' as 'string'\n\n# possibility to add different type of keys\nIf I verify 'alg' is equal to 'ES256'\nWhen I create 'es256' public key from did document 'didDocument'\nand I verify jws signature in 'message_string'\nand I set 'verifed' to 'true' as 'string'\nEndIf\n\nIf I verify 'verifed' is not found\nWhen I exit with error message 'Signature verification failed'\nEndIf\n\nThen print the string 'Signature verification successful'\n"
}