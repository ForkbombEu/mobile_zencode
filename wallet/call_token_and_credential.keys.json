{
    "keyring": {
        "bitcoin": "L532fW63yrm6Jgd36NXYFDEz5HsmgTz67mGYsKkCtt26rAg7qg8y",
        "credential": "hd74Aegfq8nRDWCqs5vOA0lHOzHQzjzIByBLtgwfLYU=",
        "ecdh": "oTiBxSDE71k5PFaXTxnTb9zsTTdZ701XMWKbdnhN5Jg=",
        "eddsa": "ErCHR7PMWiCHNZnRwK2oAHLnrydMCKVzP84JZS8ZAuGd",
        "es256": "i3XWJbqjkLvST16BSvNO1owZG56RcU590Kp/SvWgHy4=",
        "ethereum": "bbcf12b582ec688474e765e63b45040981e1cebb657c17d2925298dfe6f75d40",
        "reflow": "hd74Aegfq8nRDWCqs5vOA0lHOzHQzjzIByBLtgwfLYU="
    },
    "client_id": "did:dyne:sandbox.signroom:PTDvvQn1iWQiVxkfsDnUid8FbieKbHq46Qs8c9CZx67",
    "oauth_flow_parameters": {
        "Authorization": "BEARER ",
        "jwt-body-params": {
            "state": "xyz"
        }
    },
    "token_headers": {
        "Content-Type": "application/x-www-form-urlencoded"
    },
    "data": {},
    "keys": {},
    "client_id_path": "client_id",
    "keyring_path": "keyring",
    "oauth_flow_parameters_path": "oauth_flow_parameters",
    "code_path": "code",
    "code_verifier_path": "code_verifier",
    "credential_parameters_path": "credential_parameters",
    "credential_endpoint_path": "credential_endpoint",
    "token_endpoint_path": "token_endpoint",
    "r.access_token": "result.access_token",
    "r.c_nonce": "result.c_nonce",
    "access_token_path": "access_token",
    "c_nonce_path": "c_nonce",
    "nonce_endpoint_path": "nonce_endpoint",
    "data_path": "data",
    "headers_path": "headers",
    "redirect_uri_path": "redirect_uri",
    "zen_pre_token": "scenario 'w3c': DPoP\n\n# keys\nGiven I have a 'keyring'\nGiven I have a 'string' named 'client_id'\nGiven I have a 'string dictionary' named 'jwt-body-params' inside 'oauth_flow_parameters'\n\n# data\nGiven I have a 'string' named 'grant_type' inside 'credential_parameters'\nGiven I have a 'string' named 'token_endpoint' inside 'credential_parameters'\nGiven I have a 'string' named 'code_verifier'\nGiven I have a 'string' named 'code'\nGiven I have a 'string' named 'redirect_uri'\n\nWhen I create jwk of es256 public key\n\nWhen I create the random 'ramdom_jti'\nWhen I write the string '' in 'jti'\nWhen I append the 'url64' of 'ramdom_jti' to 'jti'\n\nWhen I copy 'token_endpoint' to 'token_endpoint_copy'\nWhen I rename the 'token_endpoint_copy' to 'htu'\n\n#       jti: randomBytes(16).toString('base64url'),\n#         htm: 'POST',\n#         htu: 'https://server.example.com/token',\n\nWhen I create the timestamp\nWhen I rename the 'timestamp' to 'iat'\n\nWhen I set 'htm' to 'POST' as 'string'\nWhen I set 'alg' to 'ES256' as 'string'\nWhen I set 'typ' to 'dpop+jwt' as 'string'\n\nWhen I create the 'string dictionary' named 'DPoP-payload'\nWhen I move 'iat' in 'DPoP-payload'\nWhen I move 'jti' in 'DPoP-payload'\nWhen I move 'htu' in 'DPoP-payload'\nWhen I move 'htm' in 'DPoP-payload'\n\nWhen I create the 'string dictionary' named 'DPoP-header'\nWhen I move 'alg' in 'DPoP-header'\nWhen I move 'typ' in 'DPoP-header'\nWhen I move 'jwk' in 'DPoP-header'\n\nWhen I create the jws signature of header 'DPoP-header' and payload 'DPoP-payload'\n\nWhen I rename the 'jws signature' to 'DPoP'\n\nWhen I create the 'string dictionary' named 'data'\nand I move 'DPoP' in 'data'\nand I move 'client_id' in 'data'\nand I move 'code' in 'data'\nand I move 'redirect_uri' in 'data'\nand I move 'code_verifier' in 'data'\nand I move 'grant_type' in 'data'\n\nThen print the 'data'\nThen print the 'token_endpoint'\n",
    "zen_pre_credential": "scenario 'w3c': DPoP\n\n# keys\nGiven I have a 'keyring'\nGiven I have a 'string' named 'client_id'\nGiven I have a 'string' named 'Authorization' inside 'oauth_flow_parameters'\n\n# data\nGiven I have a 'string' named 'format' inside 'credential_parameters'\nGiven I have a 'string' named 'credential_configuration_id' inside 'credential_parameters'\nGiven I have a 'string' named 'credential_endpoint' inside 'credential_parameters'\nGiven I have a 'string' named 'credential_issuer' inside 'credential_parameters'\n\nGiven I have a 'string' named 'access_token'\nGiven I have a 'string' named 'c_nonce'\n\n\nWhen I create jwk of es256 public key\n\nWhen I copy 'credential_issuer' to 'aud'\n\n## 1. Create proof-payload\n\nWhen I create the 'string dictionary' named 'proof-payload'\n\nWhen I create the timestamp\nWhen I rename the 'timestamp' to 'iat'\n\nWhen I move 'iat' in 'proof-payload'\n\nWhen I rename the 'client_id' to 'iss'\nWhen I move 'iss' in 'proof-payload'\nWhen I move 'aud' in 'proof-payload'\n\nWhen I rename the 'c_nonce' to 'nonce'\nWhen I move 'nonce' in 'proof-payload'\n\n## end 1.\n\n## 2. create proof-header\n\nWhen I create the 'string dictionary' named 'proof-header'\nWhen I set 'alg' to 'ES256' as 'string'\nWhen I set 'typ' to 'open4vci-proof+jwt' as 'string'\n\nWhen I move 'alg' in 'proof-header'\nWhen I move 'typ' in 'proof-header'\nWhen I move 'jwk' in 'proof-header'\n\n## end 2,\n\n# 3. create jws from proof-header and proof-payload and create proof\n\nWhen I create the 'string dictionary' named 'proof'\n\nWhen I create the jws signature of header 'proof-header' and payload 'proof-payload'\nWhen I rename the 'jws signature' to 'jwt'\n\nWhen I move 'jwt' in 'proof'\nWhen I set 'proof_type' to 'jwt' as 'string'\nWhen I move 'proof_type' in 'proof'\n\n## end 3.\nWhen I create the 'string dictionary' named 'headers'\nWhen I append 'access_token' to 'Authorization'\nand I move 'Authorization' in 'headers'\n\nWhen I create the 'string dictionary' named 'data'\nand I move 'proof' in 'data'\nand I move 'credential_configuration_id' in 'data'\nand I move 'format' in 'data'\n\nThen print the 'data'\nThen print the 'credential_endpoint'\nThen print the 'headers'\n"
}